
     Expressões Regulares em Javascript    ---   PLAYLIST
https://www.youtube.com/watch?v=rejqIp7ExXA&list=PLbIBj8vQhvm0Yfx1JMCEOM-BB-WOCOUE1


Match  -->> Localiza dados
Replace --> Troca dados


----------------------------

Exemplo com ancora ^

   Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

   Sabendo que o erro sempre começa com a expressão Caused by:, faça uma regex que capture-o.

   ^Caused by:.*

------------


    Qual das regex abaixo capturaria exatamente as strings de data que seguem o modelo: Data: dia/mes/ano ou Data:dia/mes/ano?

    Alvos: Data: 02/09/1964 ou Data:02/09/1964

    ^Data:[\s]?[0-9]{2}\/[0-9]{2}\/[0-9]{4}$


----------------------------

    ?:  -->> Não capitura o grupo selecionado, não entra na sequencia de grupos

            (?:de\s+)   -->>  este grupo existindo ou se não o "de"  não entra na sequencia 


    ex:

        21 de Maio de 1993
        ([0123]?\d)\s+(?:de\s+)?([A-Z][a-zç]{1,8})\s+(?:de\s+)?([12]\d{3})
        resultado -->> ||| 21 ||| Maio ||| 1993
        só mostra 3 grupos



---------------------------------

    Z171PZ7AZ23PZ7819AZ78GZ1AZ99IZ34O

    cada letra da palavra recebe o prefixo Z, mas não apenas isso. A letra Z é seguida de um número com um ou mais dígitos

    crie uma expressão regular que consiga evidenciar a palavra secreta. ATENÇÃO: para resolver este problema você precisará 
    trabalhar com grupos, não deixe de marcar a opção "Mostrar grupos" do nosso testador de expressão regulares.

              Z\d+(\w)
     

----------------------------------

    Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

    Queremos usar uma Regex que possa encontrar essa linha e separar em dois grupos, 
     Causa e Descrição para simplificar a leitura
    
    regex para a exceção completa:    Caused[\s\w:.]+:[\w\s]+

    separando por grupo :    (Caused[\s\w:.]+):([\w\s]+)

          10 -->> grupo   Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: 
          2o -->> grupo   Communications link failure


-------------------------------------

     O email deve ter um @ e terminar com caelum.com.br ou alura.com.br. O nome do usuário
     (tudo antes do @) tem apenas letras minúsculas, pode ter um número no final e tem de 
     5 a 15 caracteres.

     Por exemplo:
        super.mario@caelum.com.br extrai super.mario
        donkey.kong@alura.com.br extrai donkey.kong
        bowser1@alura.com.br extrai bowser1

     Mais uma dica, para definir dentro de um grupo que queremos um OU outro usamos o 
     caractere | (pipe). Por exemplo, selecionando alfa OU beta, escrevemos (alfa|beta)


     ([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br)

---------------------------------------

     Nico Steppat|14/05/1977|Rua Buarque de Macedo|50|22222-222|Rio de Janeiro
     Romulo Henrique|14/06/1993|Rua do Lins|120|12345-322|Rio de Janeiro
     Leonardo Cordeiro|01/01/1995|Rua de Campo Grande|01|00001-234|Rio de Janeiro


     Precisamos ajudar os correios a entregar corretamente suas correspondências. 
     Para tal, disponibilizaram-nos um arquivo com diversas linhas, nas quais são 
     necessárias as informações: Nome, Rua, Número e CEP.

     As outras informações também devem ser separadas para futuros serviços dos 
     correios, porém não precisamos capturá-las neste momento.


     A dica para a criação de regex é sempre ir passo-a-passo. Por isso, vamos 
     analisar o seguinte padrão, sempre lembrando de agrupar e de adicionar o 
     pipe ao final:

          Nome|data/de/nascimento|Rua onde mora|numero|cep|Cidade

          Nome era necessário capturar, então iremos criar um grupo ([\w\s]+)\|

          Data de nascimento não era necessário, por isso, deixaremos esse grupo 
          como non-capturing group (?:\d\d\/\d\d\/\d\d\d\d)\|

          Rua Onde Mora é necessário capturar, e por isso, criamos um grupo 
          normal: ([\w\s]+)\|

          Número é necessário capturar, portanto: (\d{1,4})\|

          CEP é necessário capturar, e podemos criar um grupo dessa maneira:
           (\d{5}-\d{3})\|

          Cidade é a nossa última análise, e não é necessária. Portanto, 
          basta adicionarmos ?: para deixar o seu grupo não-capturável:
           (?:[\w\s]{10,})


         final

             ^([\w\s]+)\|(?:\d\d\/\d\d\/\d\d\d\d)\|([\w\s]+)\|(\d{1,4})\|(\d{5}-\d{3})\|(?:[\w\s]{10,})$

-------------------------------------





